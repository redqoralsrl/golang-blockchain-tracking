// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package gen

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const createErc1155 = `-- name: CreateErc1155 :exec
INSERT INTO erc721(chain_id, hash, token_id)
VALUES ($1, $2, $3)
    ON CONFLICT (chain_id, hash, token_id)
DO NOTHING
`

type CreateErc1155Params struct {
	ChainID string `json:"chain_id"`
	Hash    string `json:"hash"`
	TokenID string `json:"token_id"`
}

func (q *Queries) CreateErc1155(ctx context.Context, arg CreateErc1155Params) error {
	_, err := q.exec(ctx, q.createErc1155Stmt, createErc1155, arg.ChainID, arg.Hash, arg.TokenID)
	return err
}

const createErc721 = `-- name: CreateErc721 :exec
INSERT INTO erc721(chain_id, hash, token_id)
VALUES ($1, $2, $3)
ON CONFLICT (chain_id, hash, token_id)
DO NOTHING
`

type CreateErc721Params struct {
	ChainID string `json:"chain_id"`
	Hash    string `json:"hash"`
	TokenID string `json:"token_id"`
}

func (q *Queries) CreateErc721(ctx context.Context, arg CreateErc721Params) error {
	_, err := q.exec(ctx, q.createErc721Stmt, createErc721, arg.ChainID, arg.Hash, arg.TokenID)
	return err
}

const getBlockHeight = `-- name: GetBlockHeight :one
SELECT number_int from block
where chain_id = $1
order by number_int desc
limit 1
`

// Block Height
func (q *Queries) GetBlockHeight(ctx context.Context, chainID string) (string, error) {
	row := q.queryRow(ctx, q.getBlockHeightStmt, getBlockHeight, chainID)
	var number_int string
	err := row.Scan(&number_int)
	return number_int, err
}

const insertBlock = `-- name: InsertBlock :exec
INSERT INTO block (chain_id, difficulty, hash, gas_limit, gas_used, miner, number,
                   number_int, parent_hash, timestamp, timestamp_int, created_at,
                   total_difficulty, transactions_root)
VALUES ($1, $2, $3, $4, $5, $6, $7,
        $8, $9, $10, $11, $12,
        $13, $14)
`

type InsertBlockParams struct {
	ChainID          string         `json:"chain_id"`
	Difficulty       sql.NullString `json:"difficulty"`
	Hash             string         `json:"hash"`
	GasLimit         sql.NullString `json:"gas_limit"`
	GasUsed          sql.NullString `json:"gas_used"`
	Miner            sql.NullString `json:"miner"`
	Number           string         `json:"number"`
	NumberInt        string         `json:"number_int"`
	ParentHash       sql.NullString `json:"parent_hash"`
	Timestamp        string         `json:"timestamp"`
	TimestampInt     string         `json:"timestamp_int"`
	CreatedAt        time.Time      `json:"created_at"`
	TotalDifficulty  sql.NullString `json:"total_difficulty"`
	TransactionsRoot sql.NullString `json:"transactions_root"`
}

// Block Insert
func (q *Queries) InsertBlock(ctx context.Context, arg InsertBlockParams) error {
	_, err := q.exec(ctx, q.insertBlockStmt, insertBlock,
		arg.ChainID,
		arg.Difficulty,
		arg.Hash,
		arg.GasLimit,
		arg.GasUsed,
		arg.Miner,
		arg.Number,
		arg.NumberInt,
		arg.ParentHash,
		arg.Timestamp,
		arg.TimestampInt,
		arg.CreatedAt,
		arg.TotalDifficulty,
		arg.TransactionsRoot,
	)
	return err
}

const insertCoinLog = `-- name: InsertCoinLog :exec
INSERT INTO coin_log (chain_id, timestamp, timestamp_int, created_at, transaction_hash,
                      "from", "to", amount, gas, gas_int, gas_price, gas_price_int,
                      gas_used, gas_used_int)
VALUES ($1, $2, $3, $4, $5,
        $6, $7, $8, $9, $10, $11, $12,
        $13, $14)
`

type InsertCoinLogParams struct {
	ChainID         string         `json:"chain_id"`
	Timestamp       string         `json:"timestamp"`
	TimestampInt    string         `json:"timestamp_int"`
	CreatedAt       time.Time      `json:"created_at"`
	TransactionHash sql.NullString `json:"transaction_hash"`
	From            sql.NullString `json:"from"`
	To              sql.NullString `json:"to"`
	Amount          sql.NullString `json:"amount"`
	Gas             sql.NullString `json:"gas"`
	GasInt          sql.NullString `json:"gas_int"`
	GasPrice        sql.NullString `json:"gas_price"`
	GasPriceInt     sql.NullString `json:"gas_price_int"`
	GasUsed         sql.NullString `json:"gas_used"`
	GasUsedInt      sql.NullString `json:"gas_used_int"`
}

// Coin Log Insert
func (q *Queries) InsertCoinLog(ctx context.Context, arg InsertCoinLogParams) error {
	_, err := q.exec(ctx, q.insertCoinLogStmt, insertCoinLog,
		arg.ChainID,
		arg.Timestamp,
		arg.TimestampInt,
		arg.CreatedAt,
		arg.TransactionHash,
		arg.From,
		arg.To,
		arg.Amount,
		arg.Gas,
		arg.GasInt,
		arg.GasPrice,
		arg.GasPriceInt,
		arg.GasUsed,
		arg.GasUsedInt,
	)
	return err
}

const insertContract = `-- name: InsertContract :exec
INSERT INTO contract (chain_id, hash, name, symbol, decimals, total_supply, type, creator)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) ON CONFLICT (hash, chain_id) DO UPDATE
SET name = EXCLUDED.name,
    symbol = EXCLUDED.symbol,
    decimals = EXCLUDED.decimals,
    total_supply = EXCLUDED.total_supply,
    type = EXCLUDED.type,
    creator = EXCLUDED.creator
`

type InsertContractParams struct {
	ChainID     string         `json:"chain_id"`
	Hash        string         `json:"hash"`
	Name        sql.NullString `json:"name"`
	Symbol      sql.NullString `json:"symbol"`
	Decimals    sql.NullInt32  `json:"decimals"`
	TotalSupply sql.NullString `json:"total_supply"`
	Type        sql.NullString `json:"type"`
	Creator     sql.NullString `json:"creator"`
}

// Contract Insert
func (q *Queries) InsertContract(ctx context.Context, arg InsertContractParams) error {
	_, err := q.exec(ctx, q.insertContractStmt, insertContract,
		arg.ChainID,
		arg.Hash,
		arg.Name,
		arg.Symbol,
		arg.Decimals,
		arg.TotalSupply,
		arg.Type,
		arg.Creator,
	)
	return err
}

const insertERC1155Log = `-- name: InsertERC1155Log :exec
INSERT INTO erc1155_log (chain_id, timestamp, timestamp_int, created_at, transaction_hash,
                         contract_address, "from", "to", token_id, amount, function, name, symbol)
VALUES ($1, $2, $3, $4, $5,
        $6, $7, $8, $9, $10, $11, $12, $13)
`

type InsertERC1155LogParams struct {
	ChainID         string         `json:"chain_id"`
	Timestamp       string         `json:"timestamp"`
	TimestampInt    string         `json:"timestamp_int"`
	CreatedAt       time.Time      `json:"created_at"`
	TransactionHash string         `json:"transaction_hash"`
	ContractAddress sql.NullString `json:"contract_address"`
	From            sql.NullString `json:"from"`
	To              sql.NullString `json:"to"`
	TokenID         sql.NullString `json:"token_id"`
	Amount          sql.NullString `json:"amount"`
	Function        sql.NullString `json:"function"`
	Name            sql.NullString `json:"name"`
	Symbol          sql.NullString `json:"symbol"`
}

// ERC1155 Log Insert
func (q *Queries) InsertERC1155Log(ctx context.Context, arg InsertERC1155LogParams) error {
	_, err := q.exec(ctx, q.insertERC1155LogStmt, insertERC1155Log,
		arg.ChainID,
		arg.Timestamp,
		arg.TimestampInt,
		arg.CreatedAt,
		arg.TransactionHash,
		arg.ContractAddress,
		arg.From,
		arg.To,
		arg.TokenID,
		arg.Amount,
		arg.Function,
		arg.Name,
		arg.Symbol,
	)
	return err
}

const insertERC20Log = `-- name: InsertERC20Log :exec
INSERT INTO erc20_log (chain_id, timestamp, timestamp_int, created_at, transaction_hash,
                       contract_address, "from", "to", amount, function, name, symbol)
VALUES ($1, $2, $3, $4, $5,
        $6, $7, $8, $9, $10, $11, $12)
`

type InsertERC20LogParams struct {
	ChainID         string         `json:"chain_id"`
	Timestamp       string         `json:"timestamp"`
	TimestampInt    string         `json:"timestamp_int"`
	CreatedAt       time.Time      `json:"created_at"`
	TransactionHash string         `json:"transaction_hash"`
	ContractAddress string         `json:"contract_address"`
	From            string         `json:"from"`
	To              string         `json:"to"`
	Amount          string         `json:"amount"`
	Function        string         `json:"function"`
	Name            sql.NullString `json:"name"`
	Symbol          sql.NullString `json:"symbol"`
}

// ERC20 Log Insert
func (q *Queries) InsertERC20Log(ctx context.Context, arg InsertERC20LogParams) error {
	_, err := q.exec(ctx, q.insertERC20LogStmt, insertERC20Log,
		arg.ChainID,
		arg.Timestamp,
		arg.TimestampInt,
		arg.CreatedAt,
		arg.TransactionHash,
		arg.ContractAddress,
		arg.From,
		arg.To,
		arg.Amount,
		arg.Function,
		arg.Name,
		arg.Symbol,
	)
	return err
}

const insertERC721Log = `-- name: InsertERC721Log :exec
INSERT INTO erc721_log (chain_id, timestamp, timestamp_int, created_at, transaction_hash,
                        contract_address, "from", "to", token_id, function, name, symbol)
VALUES ($1, $2, $3, $4, $5,
        $6, $7, $8, $9, $10, $11, $12)
`

type InsertERC721LogParams struct {
	ChainID         string         `json:"chain_id"`
	Timestamp       string         `json:"timestamp"`
	TimestampInt    string         `json:"timestamp_int"`
	CreatedAt       time.Time      `json:"created_at"`
	TransactionHash string         `json:"transaction_hash"`
	ContractAddress string         `json:"contract_address"`
	From            string         `json:"from"`
	To              string         `json:"to"`
	TokenID         string         `json:"token_id"`
	Function        sql.NullString `json:"function"`
	Name            sql.NullString `json:"name"`
	Symbol          sql.NullString `json:"symbol"`
}

// ERC721 Log Insert
func (q *Queries) InsertERC721Log(ctx context.Context, arg InsertERC721LogParams) error {
	_, err := q.exec(ctx, q.insertERC721LogStmt, insertERC721Log,
		arg.ChainID,
		arg.Timestamp,
		arg.TimestampInt,
		arg.CreatedAt,
		arg.TransactionHash,
		arg.ContractAddress,
		arg.From,
		arg.To,
		arg.TokenID,
		arg.Function,
		arg.Name,
		arg.Symbol,
	)
	return err
}

const insertLog = `-- name: InsertLog :exec
INSERT INTO log (chain_id, address, block_hash, block_number, block_number_int, data,
                 log_index, removed, topics, transaction_hash, transaction_index,
                 "from", "to", timestamp, timestamp_int, created_at)
VALUES ($1, $2, $3, $4, $5, $6,
        $7, $8, $9, $10, $11,
        $12, $13, $14, $15, $16)
`

type InsertLogParams struct {
	ChainID          string         `json:"chain_id"`
	Address          sql.NullString `json:"address"`
	BlockHash        string         `json:"block_hash"`
	BlockNumber      string         `json:"block_number"`
	BlockNumberInt   sql.NullString `json:"block_number_int"`
	Data             sql.NullString `json:"data"`
	LogIndex         sql.NullString `json:"log_index"`
	Removed          bool           `json:"removed"`
	Topics           []string       `json:"topics"`
	TransactionHash  string         `json:"transaction_hash"`
	TransactionIndex string         `json:"transaction_index"`
	From             sql.NullString `json:"from"`
	To               sql.NullString `json:"to"`
	Timestamp        string         `json:"timestamp"`
	TimestampInt     string         `json:"timestamp_int"`
	CreatedAt        time.Time      `json:"created_at"`
}

// Log Insert
func (q *Queries) InsertLog(ctx context.Context, arg InsertLogParams) error {
	_, err := q.exec(ctx, q.insertLogStmt, insertLog,
		arg.ChainID,
		arg.Address,
		arg.BlockHash,
		arg.BlockNumber,
		arg.BlockNumberInt,
		arg.Data,
		arg.LogIndex,
		arg.Removed,
		pq.Array(arg.Topics),
		arg.TransactionHash,
		arg.TransactionIndex,
		arg.From,
		arg.To,
		arg.Timestamp,
		arg.TimestampInt,
		arg.CreatedAt,
	)
	return err
}

const insertTransaction = `-- name: InsertTransaction :exec
INSERT INTO transaction (chain_id, block_hash, block_number, block_number_int, "from", "to",
                         gas, gas_int, gas_price, gas_price_int, hash, r, s, v, transaction_index,
                         value, value_int, nonce, input, contract_address, gas_used, gas_used_int,
                         status, type, timestamp, timestamp_int, created_at, coin_count, nft_count, erc20_count, erc721_count, erc1155_count)
VALUES ($1, $2, $3, $4, $5, $6,
        $7, $8, $9, $10, $11, $12, $13, $14, $15,
        $16, $17, $18, $19, $20, $21, $22,
        $23, $24, $25, $26, $27, $28, $29, $30, $31, $32)
`

type InsertTransactionParams struct {
	ChainID          string         `json:"chain_id"`
	BlockHash        string         `json:"block_hash"`
	BlockNumber      string         `json:"block_number"`
	BlockNumberInt   string         `json:"block_number_int"`
	From             sql.NullString `json:"from"`
	To               sql.NullString `json:"to"`
	Gas              sql.NullString `json:"gas"`
	GasInt           sql.NullString `json:"gas_int"`
	GasPrice         sql.NullString `json:"gas_price"`
	GasPriceInt      sql.NullString `json:"gas_price_int"`
	Hash             string         `json:"hash"`
	R                sql.NullString `json:"r"`
	S                sql.NullString `json:"s"`
	V                sql.NullString `json:"v"`
	TransactionIndex sql.NullString `json:"transaction_index"`
	Value            sql.NullString `json:"value"`
	ValueInt         sql.NullString `json:"value_int"`
	Nonce            sql.NullString `json:"nonce"`
	Input            sql.NullString `json:"input"`
	ContractAddress  sql.NullString `json:"contract_address"`
	GasUsed          sql.NullString `json:"gas_used"`
	GasUsedInt       sql.NullString `json:"gas_used_int"`
	Status           sql.NullString `json:"status"`
	Type             sql.NullString `json:"type"`
	Timestamp        string         `json:"timestamp"`
	TimestampInt     string         `json:"timestamp_int"`
	CreatedAt        time.Time      `json:"created_at"`
	CoinCount        string         `json:"coin_count"`
	NftCount         string         `json:"nft_count"`
	Erc20Count       string         `json:"erc20_count"`
	Erc721Count      string         `json:"erc721_count"`
	Erc1155Count     string         `json:"erc1155_count"`
}

// Transaction Insert
func (q *Queries) InsertTransaction(ctx context.Context, arg InsertTransactionParams) error {
	_, err := q.exec(ctx, q.insertTransactionStmt, insertTransaction,
		arg.ChainID,
		arg.BlockHash,
		arg.BlockNumber,
		arg.BlockNumberInt,
		arg.From,
		arg.To,
		arg.Gas,
		arg.GasInt,
		arg.GasPrice,
		arg.GasPriceInt,
		arg.Hash,
		arg.R,
		arg.S,
		arg.V,
		arg.TransactionIndex,
		arg.Value,
		arg.ValueInt,
		arg.Nonce,
		arg.Input,
		arg.ContractAddress,
		arg.GasUsed,
		arg.GasUsedInt,
		arg.Status,
		arg.Type,
		arg.Timestamp,
		arg.TimestampInt,
		arg.CreatedAt,
		arg.CoinCount,
		arg.NftCount,
		arg.Erc20Count,
		arg.Erc721Count,
		arg.Erc1155Count,
	)
	return err
}

const insertWallet = `-- name: InsertWallet :exec
INSERT INTO wallet (chain_id, address)
VALUES ($1, $2) ON CONFLICT (chain_id, address) DO NOTHING
`

type InsertWalletParams struct {
	ChainID string `json:"chain_id"`
	Address string `json:"address"`
}

// Wallet Insert
func (q *Queries) InsertWallet(ctx context.Context, arg InsertWalletParams) error {
	_, err := q.exec(ctx, q.insertWalletStmt, insertWallet, arg.ChainID, arg.Address)
	return err
}

const subtractERC1155Balance = `-- name: SubtractERC1155Balance :exec
UPDATE erc1155_balance
SET amount = amount - $5
WHERE chain_id = $1 AND hash = $2 AND token_id = $3 AND address = $4
AND amount >= $5
`

type SubtractERC1155BalanceParams struct {
	ChainID string `json:"chain_id"`
	Hash    string `json:"hash"`
	TokenID string `json:"token_id"`
	Address string `json:"address"`
	Amount  string `json:"amount"`
}

// ERC1155 Balance DELETE (소유권 이전 시)
func (q *Queries) SubtractERC1155Balance(ctx context.Context, arg SubtractERC1155BalanceParams) error {
	_, err := q.exec(ctx, q.subtractERC1155BalanceStmt, subtractERC1155Balance,
		arg.ChainID,
		arg.Hash,
		arg.TokenID,
		arg.Address,
		arg.Amount,
	)
	return err
}

const updateContractType = `-- name: UpdateContractType :exec
UPDATE contract
SET type = $1
WHERE chain_id = $2 AND hash = $3
`

type UpdateContractTypeParams struct {
	Type    sql.NullString `json:"type"`
	ChainID string         `json:"chain_id"`
	Hash    string         `json:"hash"`
}

func (q *Queries) UpdateContractType(ctx context.Context, arg UpdateContractTypeParams) error {
	_, err := q.exec(ctx, q.updateContractTypeStmt, updateContractType, arg.Type, arg.ChainID, arg.Hash)
	return err
}

const upsertERC1155Balance_Add = `-- name: UpsertERC1155Balance_Add :exec
INSERT INTO erc1155_balance (chain_id, hash, token_id, address, amount)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (hash, token_id, address, chain_id)
DO UPDATE SET amount = erc1155_balance.amount + EXCLUDED.amount
`

type UpsertERC1155Balance_AddParams struct {
	ChainID string `json:"chain_id"`
	Hash    string `json:"hash"`
	TokenID string `json:"token_id"`
	Address string `json:"address"`
	Amount  string `json:"amount"`
}

// ERC1155 Balance UPSERT
func (q *Queries) UpsertERC1155Balance_Add(ctx context.Context, arg UpsertERC1155Balance_AddParams) error {
	_, err := q.exec(ctx, q.upsertERC1155Balance_AddStmt, upsertERC1155Balance_Add,
		arg.ChainID,
		arg.Hash,
		arg.TokenID,
		arg.Address,
		arg.Amount,
	)
	return err
}

const upsertERC20Balance = `-- name: UpsertERC20Balance :exec
INSERT INTO erc20_balance (chain_id, balance, hash, address)
VALUES ($1, $2, $3, $4)
ON CONFLICT (hash, chain_id, address) DO UPDATE
SET balance = erc20_balance.balance + EXCLUDED.balance
`

type UpsertERC20BalanceParams struct {
	ChainID string `json:"chain_id"`
	Balance string `json:"balance"`
	Hash    string `json:"hash"`
	Address string `json:"address"`
}

// ERC20 Balance UPSERT
func (q *Queries) UpsertERC20Balance(ctx context.Context, arg UpsertERC20BalanceParams) error {
	_, err := q.exec(ctx, q.upsertERC20BalanceStmt, upsertERC20Balance,
		arg.ChainID,
		arg.Balance,
		arg.Hash,
		arg.Address,
	)
	return err
}

const upsertERC721Balance = `-- name: UpsertERC721Balance :exec
INSERT INTO erc721_balance (chain_id, hash, token_id, address)
VALUES ($1, $2, $3, $4)
ON CONFLICT (hash, token_id, chain_id)
DO UPDATE SET address = EXCLUDED.address
`

type UpsertERC721BalanceParams struct {
	ChainID string `json:"chain_id"`
	Hash    string `json:"hash"`
	TokenID string `json:"token_id"`
	Address string `json:"address"`
}

// -- ERC721 Balance INSERT
func (q *Queries) UpsertERC721Balance(ctx context.Context, arg UpsertERC721BalanceParams) error {
	_, err := q.exec(ctx, q.upsertERC721BalanceStmt, upsertERC721Balance,
		arg.ChainID,
		arg.Hash,
		arg.TokenID,
		arg.Address,
	)
	return err
}

const upsertWalletBalance = `-- name: UpsertWalletBalance :exec
INSERT INTO wallet (chain_id, address, balance)
VALUES ($1, $2, $3) ON CONFLICT (chain_id, address) DO UPDATE
SET balance = wallet.balance + EXCLUDED.balance
`

type UpsertWalletBalanceParams struct {
	ChainID string `json:"chain_id"`
	Address string `json:"address"`
	Balance string `json:"balance"`
}

// Wallet Update Balance
func (q *Queries) UpsertWalletBalance(ctx context.Context, arg UpsertWalletBalanceParams) error {
	_, err := q.exec(ctx, q.upsertWalletBalanceStmt, upsertWalletBalance, arg.ChainID, arg.Address, arg.Balance)
	return err
}
